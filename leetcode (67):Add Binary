题目：Given two binary strings, return their sum (also a binary string).

For example,
a = "11"
b = "1"
Return "100".

题目的基本意思就是给定两个二进制的字符串，然后构建函数，使其能返回两个二进制数相加和的字符串形式。

考察知识点：1)进制之间的相互转换；2)字符串的加法与整型数据加法的区别。

解决方案一(Runtime: 82 ms)：
class Solution:
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        if len(a)==0: return b
        if len(b)==0: return a  # 先判断是否有空的字符串，若有空的则直接加和就是另一个字符串；
        if a[-1] == '1' and b[-1] == '1':  # 下面使用了递归的思想方法，不建议采取这种方法，比较耗时；
            return self.addBinary(self.addBinary(a[0:-1],b[0:-1]),'1')+'0'
        if a[-1] == '0' and b[-1] == '0':
            return self.addBinary(a[0:-1],b[0:-1])+'0'
        else:
            return self.addBinary(a[0:-1],b[0:-1])+'1'

解决方案二（Runtime: 69 ms），可在jupyter中直接运行
def addBinary(a, b):
    return bin(int(a,2)+int(b,2))[2:]


if __name__=="__main__":
    print(addBinary('11','1'))
    
输出：
100
知识点：
一、进制之间的相互转化，以及字符串的加法，实验如下：

a='11'
b='1'
print(a+b)     # 字符串的加法实现的是字符串的拼接；
print(type(a+b))
print(bin(int(a,2)+int(b,2)))
print(type(bin(int(a,2)+int(b,2))))  
输出：
111
<class 'str'>
0b100
<class 'str'>
    从实验结果可以发现，字符串的加法就是实现字符串的无缝拼接；另外对于进制转换，python已经为我们提供了内置函数，所以我们没有必要在自己
造轮子了，自己造的轮子效率低而且容易出问题，降低开发效率。
int（）函数实际上就是把数据转化为十进制的，比如int('100', 2)，括号内的2指的就是前面的字符串是二进制的，如果是八进制的就改成8.
注意：上述一定不要忘记加引号，因为二、八、十六进制都是一个字符串，忘记加引号会报错。
二、在对字符串实现相加之前先要将其转化成整型才能进行运算；
