一个由小写字母组成的字符串可以看成一些同一字母的最大碎片组成的。例如,"aaabbaaac"是由下面碎片组成的:'aaa','bb','c'。牛牛现在给定一个字符串,请你帮助计算这个字符串的所有碎片的平均长度是多少。
输入描述:
输入包括一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),s只含小写字母('a'-'z')

输出描述:
输出一个整数,表示所有碎片的平均长度,四舍五入保留两位小数。

如样例所示: s = "aaabbaaac"
所有碎片的平均长度 = (3 + 2 + 3 + 1) / 4 = 2.25
示例1 
输入
aaabbaaac
输出
2.25

解答如下：
from functools import reduce
def str_pieces(s):
    pattern = s[0]
    l = []
    num = 0
    for i in s :
        if i == pattern :
            num += 1
        else :
            l.append(num)
            pattern = i
            num = 1
    l.append(num)
    return l
while True:
    try:
        s = input()
        l = str_pieces(s)
        sum = reduce(lambda x,y:x+y,l)
        print('{:.2f}'.format(sum/len(l)))
    except:
        break
