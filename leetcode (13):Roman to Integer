Given a roman numeral, convert it to an integer.

Input is guaranteed to be within the range from 1 to 3999.

BASIC Character       Arabic numerals
I                      1
V                      5
X                      10
L                      50
C                      100
D                      500
M                      1000

the rule is complex,but in this condition. It can be tell as:
we start from the end of String.
if the char before the current char we are reading.
plus it
if not
reduce it。

规则简而言之就是当前字符如果大于右边的就加这个字符，如果小于右边的就减这个字符所代表的单位。

看个例子：input：  "DCXXI"  output ：621 
实际上就是考察str操作和字典操作的。
下面是大牛的解决方案：
class Solution:
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        roman = {'M': 1000,'D': 500 ,'C': 100,'L': 50,'X': 10,'V': 5,'I': 1}
        z = 0
        for i in range(0, len(s) - 1):     # 这里不用写明从0开始，默认的就是从0开始；
            if roman[s[i]] < roman[s[i+1]]:
                z -= roman[s[i]]
            else:
                z += roman[s[i]]
        return z + roman[s[-1]]

下面是我的解决方案，和大牛几乎一样（可以在jupyter中直接运行）：
def romanToInt(s):

    roman_dict = { "I":1, "V":5, "X":10, "L":50 ,"C":100 ,"D":500, "M":1000 }
    roman = 0   
    for i in range(len(s)-1):
        if roman_dict[s[i]]<roman_dict[s[i+1]]:
            roman -=roman_dict[s[i]]
        else:
            roman +=roman_dict[s[i]]
    return roman+roman_dict[s[len(s)-1]]  # 最后别忘记加上那个落单的，当然直接用s[-1]一样，更简便；
# s = "DCXXI"
s = "MCMXCVI"
romanToInt(s)
=>1996

学到的知识点：
一、对于可迭代的对象，例如列表、元组、字符串什么的。虽然可以直接使用for循环取出他们之中的元素进行操作，但是种种例子表明直接操作
    并不一定灵活，反而是借助下标或者称偏移量来访问反而更加有利于操作，直接迭代总是有限制，不方便操作。所以表面上看是麻烦了点
    实际上并不是这样，反而大大简化了我们的复杂工作，这个题目就能深刻的反映出这一点；
二、本题借助罗马数字这个载体，其实考察了字典的建立，以及str（字符串）的元素的访问方式。一种就是直接遍历，一种就是借助偏移量访问。
    此题难度不大，但是需要知道规则，不然不知如何去做；
三、用a-=b来代替a=a-b是由好处的，这样就不用将a再复制一遍了，可以减少空间，细微之处见编程功夫，多加练习，多加思考，加油！！！
