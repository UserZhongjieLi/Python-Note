Given a roman numeral, convert it to an integer.

Input is guaranteed to be within the range from 1 to 3999.

BASIC Character       Arabic numerals
I                      1
V                      5
X                      10
L                      50
C                      100
D                      500
M                      1000

the rule is complex,but in this condition. It can be tell as:
we start from the end of String.
if the char before the current char we are reading.
plus it
if not
reduce it。

看个例子：input：  "DCXXI"  output ：621 
实际上就是考察str操作和字典操作的。
下面是大牛的解决方案：
class Solution:
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        roman = {'M': 1000,'D': 500 ,'C': 100,'L': 50,'X': 10,'V': 5,'I': 1}
        z = 0
        for i in range(0, len(s) - 1):
            if roman[s[i]] < roman[s[i+1]]:
                z -= roman[s[i]]
            else:
                z += roman[s[i]]
        return z + roman[s[-1]]

学到的知识点：
一、对于可迭代的对象，例如列表、元组、字符串什么的。虽然可以直接使用for循环取出他们之中的元素进行操作，但是种种例子表明直接操作
    并不一定灵活，反而是借助下标或者称偏移量来访问反而更加有利于操作，直接迭代总是有限制，不方便操作。所以表面上看是麻烦了点
    实际上并不是这样，反而大大简化了我们的复杂工作，这里的题目就能深刻的反映出这一点；
