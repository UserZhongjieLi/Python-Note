Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

思路

1、使用栈（先进后出）
2、如果遇到左边符号{，[，(，则将其对应的右边符号}，]，)入栈，如果遇到右边符号，则判断栈顶元素是否匹配，不匹配则返回False
3、最后栈空，则完全闭合匹配，返回True

解决方案一：
class Solution:
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        dict = {"]":"[", "}":"{", ")":"("}
        for char in s:
            if char in dict.values():
                stack.append(char)
            elif char in dict.keys():
                if stack == [] or dict[char] != stack.pop():
                    return False
            else:
                return False
        return stack == []

首先补充一部分关于栈（stack）的数据结构的知识点，来源于官方教程（注：官方教程是最好的学习python的资料）
网址：https://docs.python.org/3.1/tutorial/datastructures.html
5.1.1. Using Lists as Stacks
    The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved 
    (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack,
    use pop() without an explicit index. 
    For example:

    >>> stack = [3, 4, 5]
    >>> stack.append(6)
    >>> stack.append(7)
    >>> stack
    [3, 4, 5, 6, 7]
    >>> stack.pop()
    7
    >>> stack
    [3, 4, 5, 6]
    >>> stack.pop()
    6
    >>> stack.pop()
    5
    >>> stack
    [3, 4]
