题目：Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
It doesn't matter what you leave beyond the new length.
很简单的一道题，注意要求不能使用额外空间，并且使nums的所有的不同值排在最前面。对于nums={1，1，2，3，3，4，5} ，
要求返回5，并且nums的前5位分别为不重复的值。

分析：1)它是一个已经排好序的数组(在python中称为列表)，这个条件非常重要；
     2)既然要返回个数，那么就需要一个计数变量；
解决方案：
class Solution:
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: # 判断是不是空的，是空的直接返回0；
            return 0

        newTail = 0  # newtail，即新的尾部的意思，这里的尾部指的是不重复元素的最后一个，当有新成员进入时他就要更新了；

        for i in range(1, len(nums)): # 既然不能使用额外的空间，那就只能使用for循环遍历其内部所有元素了，而且发现没有
                                      # 这里也是使用下标对数组元素进行访问，而不是直接取出元素，这种做法已经用过多次；
            if nums[i] != nums[newTail]:
                newTail += 1          # 又一个不重复元素出现，所以要先将下标增加1，然后再将该元素代替该下标原有元素；
                nums[newTail] = nums[i]

        return newTail + 1            # 因为newTail是从0开始计数的，所以要返回不重复元素的总个数需要再加上1，
                                      # 当然把它当成最后一个不重复元素的下标也可以；
O(n)


要解决的问题：怎么判断一个算法的时间复杂度和空间复杂度？

知识点：
一、在条件判断的表达式中要灵活运用is 、not、and、or，他们非常方便 ，另外还有in，用来判断数据中是否有这个元素，非常方便；
二、语句for i in range(1, len(nums))，有两个知识点，首先就是再次使用下标来访问列表(数组)中的元素；第二个就是发现元素
     是从1开始访问而不是0，这是因为第0个元素无论是否有重复的，它都将会直接加入无重复元素数组中，不需要进行比较，因为它是
     第一个元素，没有比较的必要；
