#############  创建节点  start #################
# 下边的代码用于实现一个Node类：
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
此节点类只有一个构建函数，接收一个数据参数，其中next表示指针域的指针，实例化后得到一个节点对象(Node object)。具体例子如下：
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
node=Node(4)
print(node)
print(node.data)
print(node.next)
=> 	
	<__main__.Node object at 0x00000000043F6128>
	4
	None

#############  创建节点  end  #################


#############  创建链表类  ###############       
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
  
    def is_empty(self):           # is_empty方法检查链表是否是一个空链表,这个方法只需要检查head节点是否指向None即可;
        return self.head is None  # 注意：这其实是一个判断语句，中间使用了“is”，返回值是布尔值；
  
    def append(self, data):       # append方法表示增加元素到链表，这和insert方法不同，前者使新增加的元素成为链表中第一个节点，
                                  # 而后者是根据索引值来判断插入到链表的哪个位置
        node = Node(data)
        if self.head is None:
            self.head = node
            self.tail = node
        else:
            self.tail.next = node
            self.tail = node
  
    def iter(self):
        if not self.head:
            return
        cur = self.head
        yield cur.data
        while cur.next:
            cur = cur.next
            yield cur.data
  
    def insert(self, idx, value):
        cur = self.head
        cur_idx = 0
        if cur is None:             # 判断是否是空链表
            raise Exception('The list is an empty list')
        while cur_idx < idx-1:   # 遍历链表
            cur = cur.next
            if cur is None:   # 判断是不是最后一个元素
                raise Exception('list length less than index')
            cur_idx += 1
        node = Node(value)
        node.next = cur.next
        cur.next = node
        if node.next is None:
            self.tail = node
  
    def remove(self, idx):
        cur = self.head
        cur_idx = 0
        if self.head is None:  # 空链表时
            raise Exception('The list is an empty list')
        while cur_idx < idx-1:
            cur = cur.next
            if cur is None:
                raise Exception('list length less than index')
            cur_idx += 1
        if idx == 0:   # 当删除第一个节点时
            self.head = cur.next
            cur = cur.next
            return
        if self.head is self.tail:   # 当只有一个节点的链表时
            self.head = None
            self.tail = None
            return
        cur.next = cur.next.next
        if cur.next is None:  # 当删除的节点是链表最后一个节点时
            self.tail = cur
  
    def size(self):
        current = self.head
        count = 0
        if current is None:
            return 'The list is an empty list'
        while current is not None:
            count += 1
            current = current.next
        return count
  
    def search(self, item):
        current = self.head
        found = False
        while current is not None and not found:
            if current.data == item:
                found = True
            else:
                current = current.next
        return found
  
if __name__ == '__main__':
    link_list = LinkedList()
    for i in range(150):
        link_list.append(i)
#    print(link_list.is_empty())
#    link_list.insert(10, 30)
  
#    link_list.remove(0)
  
    for node in link_list.iter():
        print('node is {0}'.format(node))
    print(link_list.size())
#    print(link_list.search(20))
