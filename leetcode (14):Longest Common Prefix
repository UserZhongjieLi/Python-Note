Write a function to find the longest common prefix string amongst an array of strings.
题目的大致意思是：给出字符串数组，查找这个数组中所有字符串的最长公共前缀。


    在说明大牛的思路之前，先学习一个python的内建函数，就是zip（）函数：
 zip() 函数

描述
zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。
如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。

语法
zip([iterable, ...])

参数说明：
iterabl -- 一个或多个迭代器;

返回值
返回元组列表。

实例
以下实例展示了 zip 的使用方法：
>>>a = [1,2,3]
>>> b = [4,5,6]
>>> c = [4,5,6,7,8]
>>> zipped = zip(a,b)     # 打包为元组的列表
[(1, 4), (2, 5), (3, 6)]
>>> zip(a,c)              # 元素个数与最短的列表一致
[(1, 4), (2, 5), (3, 6)]
>>> zip(*zipped)          # 与 zip 相反，可理解为解压，返回二维矩阵式
[(1, 2, 3), (4, 5, 6)]
通过上面的例子我们可以发现利用* 号操作符表面上看是解压，但其实际的作用是将列表中每一个可迭代对象的对应的元素放在了元组中，最终产生
元组的个数等于这些可迭代对象所包含的元素个数最少的那个。比如上面的zipped = [(1, 4), (2, 5), (3, 6)]，每个可迭代对象中最少含有
两个元素，故 zip(*zipped) =>[(1, 2, 3), (4, 5, 6)],发现里面共有两个元组。

仔细想想我们正好可以利用zip函数的特性，将


大牛1的解决方案（运行时间76ms）：
class Solution:
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        if not strs:
            return ""
            
        for i, letter_group in enumerate(zip(*strs)):
            if len(set(letter_group)) > 1:
                return strs[0][:i]
        else:
            return min(strs)
大牛2的解决方案：
class Solution:
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        sz, ret = zip(*strs), ""
        for c in sz:
            if len(set(c)) > 1: break    # 解释见下方知识点学习三
            ret += c[0]
        return ret
        
大牛3的解决方案(Runtime: 56 ms)：
class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        prefix = ''
        i = 0
        while True:
            try:
                tmp = strs[0][i]  # 先从最开始的字符串提取元素，存在tmp中（Template模板的简写），利用偏移量访问可迭代对象的元素；
                for item in strs: # 开始挨个验证每个项的第i个元素是否与模板一致，不一致直接返回现有的prefix；
                    if item[i] != tmp:
                        return prefix
            except: #out of index range，表明遍历最短字符串完毕，因为当i超出最小范围的时候，try中的语句就会报错，转而执行except语句
                return prefix     # 这个try...except...语句最大的好处是如果try中出现异常，程序仍然能正常执行；
            prefix += tmp         # 这里巧妙的运用了字符串的加运算，直接实现了字符串的拼接，好方法；
            i += 1                # 该项完成比较，进行下一项；
        return prefix

学到的知识点：
一、首先就是学到了异常处理
        异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。
    异常是Python对象，表示一个错误。当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。
        try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。如果你不想在异常发生时结束你的程序，只需在try里捕获它。
    也就是说如果try语句块中出现问题的话，程序不会立即停止执行；而是转到except中，它的里面有语句来处理这个异常，并指示计算机应该做什么。
    
        try的工作原理是，当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，接下来会
        发生什么依赖于执行时是否出现异常。
            try:
            <语句>        #运行别的代码
            except <名字>：
            <语句>        #如果在try部份引发了'name'异常
            except <名字>，<数据>:
            <语句>        #如果引发了'name'异常，获得附加的数据
            else:
            <语句>        #如果没有异常发生
        1）如果当try后的语句执行时发生异常，python就跳回到try并执行第一个匹配该异常的except子句，异常处理完毕，控制流就通过整个try
        语句（除非在处理异常时又引发新的异常）。
        2）如果在try后的语句里发生了异常，却没有匹配的except子句，异常将被递交到上层的try，或者到程序的最上层（这样将结束程序，并打印
        缺省的出错信息）。
        3）如果在try子句执行时没有发生异常，python将执行else语句后的语句（如果有else的话），然后控制流通过整个try语句。
    在本题中，try...except...语句被放在一个while循环中，我经常见到这种处理方式。
    另外一点我们发现，只要见到return语句，不管是在什么循环体中都会结束，返回函数值。
二、方案2中的语句 sz, ret = zip(*strs), ""     # 注意这是按位置进行赋值操作的，即sz= zip(*strs)，ret=""
    另外一点就是zip(*strs)  #strs前面加了一个*就是对其进行zip逆操作，把zip处理的过程再还原回去，上面已经有详细的介绍。
三、就是方案2的语句 if len(set(c)) > 1: break  #注意：这里使用了set（）函数，它返回的是这个列表c中不重复元素组成的一个列表，如果set(c)
    的长度大于1，说明这个列表c中的元素并不是只有一种，否则其长度应该是1才对。也就是说这个列表中的元素并不完全相同，故break跳出for循环。
    否则就将这个元素添加到公共前缀的存储器ret中去，最终返回的ret就是最大公共前缀，也就是方案2的解题思路。
