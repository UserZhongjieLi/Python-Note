题目描述：
  Given an array of integers, return indices of the two numbers such that they add up to a specific target.
  You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
  Given nums = [2, 7, 11, 15], target = 9,
  Because nums[0] + nums[1] = 2 + 7 = 9,
  return [0, 1].

下方为代码：
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums) <= 1:
            return False
        buff_dict = {}
        for i in range(len(nums)):
            if nums[i] in buff_dict:
                return [buff_dict[nums[i]], i]
            else:
                buff_dict[target - nums[i]] = i
                
在jupyter上的通过键盘输入实现：
class Solution:
    def twoSum(nums, target): # 注意：这里把self参数去掉了；
        if len(nums) <= 1:
            return False
        buff_dict = {}
        for i in range(len(nums)):
            if nums[i] in buff_dict:
                return [buff_dict[nums[i]], i]
            else:
                buff_dict[target - nums[i]] = i
                
# 下方为实现键盘输入一维数组的代码：                
target= int(input("please input your target: " ))
nums = []
while True:
    try:
        input_A = int(input("Input numbers: "))
        nums +=[input_A]
    except:
        break
print(Solution.twoSum(nums,target))
