
Merge Two Sorted Lists：合并两个已排序的链表
题目：Merge two sorted linked lists and return it as a new list.The new list should be made by splicing together 
      the nodes of the first two lists.
      （合并两个已排序的链表，新链表中的每个节点必须是来自输入的两个链表的节点（即不能构造新的节点），返回新链表的头部。）
example 1

input: 1->2->4, 3->8
output: 1->2->3->4->8

考查知识点：首先我们可以从题目中观察出来，此题主要考察链表(Linked list)的相关知识。

思路

head指向输入两个链表中头节点较小值，作为新链表的头部
tail指向新链表表尾，初始状态head = tail
a扫描l1，b扫描l2，比较a和b节点内值的大小，将较小的加入tail之后，a和b中较小的向后移动一个节点，较大的不动，tail向后移动一个节点保证任意时候指
向都是新链表尾部l1和l2其中一个已经遍历完，若另一个还有元素，添加到tail之后

代码

# Definition for singly-linked list.
# 因为输入输出都是节点，所以先构建一个节点类；
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if None in (l1, l2):# 如果两个链表都是空的话，则返回谁都可以
            return l1 or l2
        head = tail = l1 if l1.val <= l2.val else l2 # 这个语句写的很有水平
        a = l1 if l1.val > l2.val else l1.next
        b = l2 if l1.val <= l2.val else l2.next
        while a and b:
            if a.val <= b.val:
                tail.next = a
                tail, a = tail.next, a.next
            else:
                tail.next = b
                tail, b = tail.next, b.next
        tail.next = a or b
        return head
        
第二位大牛的解决方案如下：
# iteratively
def mergeTwoLists1(self, l1, l2):
    dummy = cur = ListNode(0)
    while l1 and l2:
        if l1.val < l2.val:
            cur.next = l1
            l1 = l1.next
        else:
            cur.next = l2
            l2 = l2.next
        cur = cur.next
    cur.next = l1 or l2
    return dummy.next
    
# recursively    
def mergeTwoLists2(self, l1, l2):
    if not l1 or not l2:
        return l1 or l2
    if l1.val < l2.val:
        l1.next = self.mergeTwoLists(l1.next, l2)
        return l1
    else:
        l2.next = self.mergeTwoLists(l1, l2.next)
        return l2
        
# in-place, iteratively        
def mergeTwoLists(self, l1, l2):
    if None in (l1, l2):
        return l1 or l2
    dummy = cur = ListNode(0)
    dummy.next = l1
    while l1 and l2:
        if l1.val < l2.val:
            l1 = l1.next
        else:
            nxt = cur.next
            cur.next = l2
            tmp = l2.next
            l2.next = nxt
            l2 = tmp
        cur = cur.next
    cur.next = l1 or l2
    return dummy.next
    
社区大神 StefanPochmann的解决方案：
    Solution 1

If both lists are non-empty, I first make sure a starts smaller, use its head as result, and merge the remainders behind it.
Otherwise, i.e., if one or both are empty, I just return what's there.

class Solution:
    def mergeTwoLists(self, a, b):
        if a and b:
            if a.val > b.val:
                a, b = b, a
            a.next = self.mergeTwoLists(a.next, b)
        return a or b
Solution 2

First make sure that a is the "better" one (meaning b is None or has larger/equal value). Then merge the remainders behind a.

def mergeTwoLists(self, a, b):
    if not a or b and a.val > b.val:
        a, b = b, a
    if a:
        a.next = self.mergeTwoLists(a.next, b)
    return a
学到的知识点：
一、类的调用：
      1）定义完类之后要先运行一下，将其实例化赋给一个新的变量名：（这个由我们自己决定。但是，注意：初始化类的时候一定要给出类的入口参数，
      这些参数是构建函数__init__(self,args,*args)中除了self参数之外的所有参数。当然，如果有默认参数值的话，就不一定要重新赋值，但是如果
      没有默认值，则必须给出相应参数的取值）
      2）类运行完之后，就可以利用我们的新变量名去调用类之中的各种函数了，形式就是newname.function_name()即可实现函数调用；
      3）另外一点需要注意的是构建函数中不要忘记写self这个参数，而且一定要放在第一个位置处；
      4）类中建立的不同函数一般我们称其为一个“method”，译为“方法”，调用这个类下面的某个函数实际上就是使用这个类的某一个方法，我们把所有
         需要的方法都可以定义到这个类下面，相当于一个工具包，然后使用的时候直接调用即可。
      
