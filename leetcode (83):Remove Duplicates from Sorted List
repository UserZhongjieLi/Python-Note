题目：Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.


解决方案一（）：
class ListNode:
    def __init__(self,x):
        self.val=x
        self.next=None


def listToNode(l):
    head=None
    tail=None
    for i in l:
        node=ListNode(i)
        if head is None:
            head=node
        if tail is not None:
            tail.next=node
        tail=node
    return head

def printNode(node):
    while node is not None:
        print(node.val)
        node=node.next


def deleteDuplicates(head):
    flag=1<<32
    q=p=head
    while p:
        if p.val!=flag:
            flag=p.val
            q=p
        else:
            q.next=p.next
        p=p.next
    return head


if __name__=="__main__":
    _list=listToNode([1,1,2,3,3,3])
    printNode(deleteDuplicates(_list))
    
输出：
1
2
3

解决方案二（Runtime: 85 ms）：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        cur = head
        while cur:
            while cur.next and cur.next.val == cur.val:
                cur.next = cur.next.next     # skip duplicated node
            cur = cur.next     # not duplicate of current node, move to next node
        return head
